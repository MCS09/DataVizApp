import { jsx as E } from "react/jsx-runtime";
import a from "react";
import m from "vega-embed";
function v(u) {
  return u && u.__esModule && Object.prototype.hasOwnProperty.call(u, "default") ? u.default : u;
}
var i, d;
function g() {
  return d || (d = 1, i = function u(e, r) {
    if (e === r) return !0;
    if (e && r && typeof e == "object" && typeof r == "object") {
      if (e.constructor !== r.constructor) return !1;
      var t, n, o;
      if (Array.isArray(e)) {
        if (t = e.length, t != r.length) return !1;
        for (n = t; n-- !== 0; )
          if (!u(e[n], r[n])) return !1;
        return !0;
      }
      if (e.constructor === RegExp) return e.source === r.source && e.flags === r.flags;
      if (e.valueOf !== Object.prototype.valueOf) return e.valueOf() === r.valueOf();
      if (e.toString !== Object.prototype.toString) return e.toString() === r.toString();
      if (o = Object.keys(e), t = o.length, t !== Object.keys(r).length) return !1;
      for (n = t; n-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(r, o[n])) return !1;
      for (n = t; n-- !== 0; ) {
        var f = o[n];
        if (!u(e[f], r[f])) return !1;
      }
      return !0;
    }
    return e !== e && r !== r;
  }), i;
}
var O = g();
const y = /* @__PURE__ */ v(O);
function j(u) {
  const [e, r] = a.useState(null), { ref: t, spec: n, onEmbed: o, onError: f, options: c = {} } = u;
  return w(() => {
    let l = !1, s = null;
    return (async () => {
      if (!(!t.current || l))
        try {
          if (s = await m(t.current, n, c), l) {
            s.finalize();
            return;
          }
          r(s), o == null || o(s);
        } catch (p) {
          console.error(`[react-vega] Error creating view: ${p}`), f == null || f(p);
        }
    })(), () => {
      l = !0, s == null || s.finalize();
    };
  }, [n, c]), e;
}
function w(u, e) {
  const r = a.useRef(null), t = a.useRef(0);
  (!r.current || !y(e, r.current)) && (t.current += 1), r.current = e, a.useEffect(u, [t.current]);
}
const q = a.forwardRef(
  (u, e) => {
    const { spec: r, options: t, onEmbed: n, onError: o, ...f } = u, c = a.useRef(null);
    return a.useImperativeHandle(e, () => {
      if (!c.current)
        throw new Error("VegaEmbed: ref is not attached to a div element");
      return c.current;
    }, []), j({
      ref: c,
      spec: r,
      onEmbed: n,
      onError: o,
      options: t
    }), /* @__PURE__ */ E("div", { ref: c, ...f });
  }
);
q.displayName = "VegaEmbed";
export {
  q as VegaEmbed,
  j as useVegaEmbed
};
